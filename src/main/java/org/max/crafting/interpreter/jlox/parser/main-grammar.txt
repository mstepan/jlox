// Context-Free Grammar for jlox language
//
// we will try to follow "C" precedence levels (see https://en.cppreference.com/w/c/language/operator_precedence)
//
//

program -> (declaration)* EOF

//====== DECLARATIONS & STATEMENTS ============

declaration -> funcDeclaration | varDeclaration | statement

funcDeclaration -> "fn" function

function -> IDENTIFIER "(" parameters? ")" block

parameters -> IDENTIFIER (", " IDENTIFIER)*

varDeclaration -> "var" IDENTIFIER ("=" expression)? ";"

statement -> exprStmt | printStmt | block | ifStatement | whileStatement | forStatement

exprStmt -> expression ";"

printStmt -> "print" expression ";"

block -> "{" declaration* "}"

ifStatement -> "if" "(" expression ")" statement ("else" statement)?

whileStatement -> "while" "(" expression ")" statement

forStatement -> "for" "(" (varDeclaration | exprStmt | ";") expression? ";" expression?  ")" statement

//====== EXPRESSIONS (all expression are left recursive by default) ============

expression -> comma

comma -> assignment ("," comma)*

// assignment is right recursive
assignment -> IDENTIFIER "=" assignment | logic_or

logic_or -> logic_and ("or" logic_and)*

logic_and -> equality ("and" equality)*

equality -> comparison  (("==" | "!=") comparison)*

comparison -> term ((">" | "<=" | "<" | "<=") term)*

term -> factor (("+" | "-") factor)*

factor -> unary (("*" | "/" ) unary)*

// unary operator has highest precedence
unary -> ("!" | "-") unary | call

call -> primary ( "(" arguments? ")" )*

arguments -> expression (", " expression)*

primary -> STRING | NUMBER | "true" | "false" | nil | "(" expression ")" | IDENTIFIER
